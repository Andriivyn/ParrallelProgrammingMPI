<?xml version="1.0" encoding="UTF-8"?>
<testsuite name="com.mathpar.func.parser.ParserTest" time="0.157" tests="110" errors="0" skipped="0" failures="0">
  <properties>
    <property name="idea.version" value="2021.2.3"/>
    <property name="java.runtime.name" value="OpenJDK Runtime Environment"/>
    <property name="java.vm.version" value="14.0.2+12-Ubuntu-120.04"/>
    <property name="sun.boot.library.path" value="/usr/lib/jvm/java-14-openjdk-amd64/lib"/>
    <property name="maven.multiModuleProjectDirectory" value="/home/alla/dap01"/>
    <property name="java.vm.vendor" value="Private Build"/>
    <property name="java.vendor.url" value="Unknown"/>
    <property name="guice.disable.misplaced.annotation.check" value="true"/>
    <property name="path.separator" value=":"/>
    <property name="java.vm.name" value="OpenJDK 64-Bit Server VM"/>
    <property name="user.country" value="US"/>
    <property name="sun.java.launcher" value="SUN_STANDARD"/>
    <property name="java.vm.specification.name" value="Java Virtual Machine Specification"/>
    <property name="user.dir" value="/home/alla/dap01"/>
    <property name="java.vm.compressedOopsMode" value="32-bit"/>
    <property name="java.runtime.version" value="14.0.2+12-Ubuntu-120.04"/>
    <property name="os.arch" value="amd64"/>
    <property name="java.io.tmpdir" value="/tmp"/>
    <property name="line.separator" value="&#10;"/>
    <property name="java.vm.specification.vendor" value="Oracle Corporation"/>
    <property name="os.name" value="Linux"/>
    <property name="maven.ext.class.path" value="/snap/intellij-idea-community/330/plugins/maven/lib/maven-event-listener.jar"/>
    <property name="classworlds.conf" value="/snap/intellij-idea-community/330/plugins/maven/lib/maven3/bin/m2.conf"/>
    <property name="sun.jnu.encoding" value="UTF-8"/>
    <property name="java.library.path" value="/usr/java/packages/lib:/usr/lib/x86_64-linux-gnu/jni:/lib/x86_64-linux-gnu:/usr/lib/x86_64-linux-gnu:/usr/lib/jni:/lib:/usr/lib"/>
    <property name="maven.conf" value="/snap/intellij-idea-community/330/plugins/maven/lib/maven3/conf"/>
    <property name="jdk.debug" value="release"/>
    <property name="java.class.version" value="58.0"/>
    <property name="java.specification.name" value="Java Platform API Specification"/>
    <property name="sun.management.compiler" value="HotSpot 64-Bit Tiered Compilers"/>
    <property name="os.version" value="5.11.0-40-generic"/>
    <property name="user.home" value="/home/alla"/>
    <property name="user.timezone" value="Europe/Kiev"/>
    <property name="file.encoding" value="UTF-8"/>
    <property name="java.specification.version" value="14"/>
    <property name="user.name" value="alla"/>
    <property name="java.class.path" value="/snap/intellij-idea-community/330/plugins/maven/lib/maven3/boot/plexus-classworlds-2.6.0.jar:/snap/intellij-idea-community/330/plugins/maven/lib/maven3/boot/plexus-classworlds.license"/>
    <property name="java.vm.specification.version" value="14"/>
    <property name="sun.arch.data.model" value="64"/>
    <property name="sun.java.command" value="org.codehaus.classworlds.Launcher -Didea.version=2021.2.3 test"/>
    <property name="java.home" value="/usr/lib/jvm/java-14-openjdk-amd64"/>
    <property name="user.language" value="en"/>
    <property name="java.specification.vendor" value="Oracle Corporation"/>
    <property name="java.vm.info" value="mixed mode, sharing"/>
    <property name="java.version" value="14.0.2"/>
    <property name="securerandom.source" value="file:/dev/./urandom"/>
    <property name="java.vendor" value="Private Build"/>
    <property name="maven.home" value="/snap/intellij-idea-community/330/plugins/maven/lib/maven3"/>
    <property name="file.separator" value="/"/>
    <property name="java.version.date" value="2020-07-14"/>
    <property name="java.vendor.url.bug" value="Unknown"/>
    <property name="sun.io.unicode.encoding" value="UnicodeLittle"/>
    <property name="sun.cpu.endian" value="little"/>
  </properties>
  <testcase name="funcSolveTrigWithEqual" classname="com.mathpar.func.parser.FunctionTest" time="0.003"/>
  <testcase name="funcCupInfix" classname="com.mathpar.func.parser.FunctionTest" time="0.002"/>
  <testcase name="funcIntegralSimple" classname="com.mathpar.func.parser.FunctionTest" time="0.022"/>
  <testcase name="funcSolveWithEqualsAndVectorsShouldBecomeToSolveLEQ" classname="com.mathpar.func.parser.FunctionTest" time="0.003"/>
  <testcase name="funcSumToInfinityBecomesSeries" classname="com.mathpar.func.parser.FunctionTest" time="0.002"/>
  <testcase name="funcIntegralLimitedSingleArg" classname="com.mathpar.func.parser.FunctionTest" time="0.006"/>
  <testcase name="funcBooleanHasCorrectPriority" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcUserDefinedFunction" classname="com.mathpar.func.parser.FunctionTest" time="0.002"/>
  <testcase name="funcAddManyArgs" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcUserDefinedFunctionDoesnotConflictWithBuiltin" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcVectorWithNulls" classname="com.mathpar.func.parser.FunctionTest" time="0.002"/>
  <testcase name="funcSequence" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcFactorialClash" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcVector" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcMultManyArgsWithParens" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcSystLDE" classname="com.mathpar.func.parser.FunctionTest" time="0.002"/>
  <testcase name="funcSolveTrigWithEqualWithVar" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcD01" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcD02" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcD03" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcD04" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcLog" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcMod" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcSum" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcGetStatusDoesntConflictWithGeBooleanOperation" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcMultManyArgs" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcInitCondWithIcWithNull" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcFloor" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcRound" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcSingleFunction" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcD" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcPostfix" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcSolveTrigWithVarWithIndex" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcSolveTrigWithEqualWithVarWithIndex" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcLogLatexNotation" classname="com.mathpar.func.parser.FunctionTest" time="0.002"/>
  <testcase name="funcBoolOperationsSimple" classname="com.mathpar.func.parser.FunctionTest" time="0.003"/>
  <testcase name="funcSolveTrig" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcBooleanHasCorrectPriority2" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcBooleanHasCorrectPriority3" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcSolveTrigWithVar" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcCeil" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcAddManyArgsWithParens" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcSolveWithEqualsShouldBecomeToSolveLEQ" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcCapInfix" classname="com.mathpar.func.parser.FunctionTest" time="0.001"/>
  <testcase name="funcWithoutArgs" classname="com.mathpar.func.parser.FunctionTest" time="0"/>
  <testcase name="funcInitCond" classname="com.mathpar.func.parser.FunctionTest" time="0.002"/>
  <testcase name="funcSpecClosureName" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.001"/>
  <testcase name="funcSpecAdjointMatrixName" classname="com.mathpar.func.parser.FunctionSpecTest" time="0"/>
  <testcase name="funcSpecSetSingle" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.005"/>
  <testcase name="funcSpecGenInversMatrixLiteral" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.002"/>
  <testcase name="funcSpecTransposeName" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.002"/>
  <testcase name="funcSpecLim" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.007"/>
  <testcase name="funcSpecInverseMatrixLiteral" classname="com.mathpar.func.parser.FunctionSpecTest" time="0"/>
  <testcase name="funcSpecSetBasicWithSymbols" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.003"/>
  <testcase name="funcSpecGenInverseMatrixName" classname="com.mathpar.func.parser.FunctionSpecTest" time="0"/>
  <testcase name="funcSpecSetBasic" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.001"/>
  <testcase name="funcSpecTransposeMatrixLiteral" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.001"/>
  <testcase name="funcSpecAdjointMatrixLiteral" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.002"/>
  <testcase name="funcSpecConjugateMatrixName" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.002"/>
  <testcase name="funcSpecClosureMatrixLiteral" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.001"/>
  <testcase name="funcSpecConjugateMatrixLiteral" classname="com.mathpar.func.parser.FunctionSpecTest" time="0"/>
  <testcase name="funcSpecVectorSet" classname="com.mathpar.func.parser.FunctionSpecTest" time="0.004"/>
  <testcase name="funcSpecInverseMatrixName" classname="com.mathpar.func.parser.FunctionSpecTest" time="0"/>
  <testcase name="funcSpecConjugatePolynomial" classname="com.mathpar.func.parser.FunctionSpecTest" time="0"/>
  <testcase name="polWithWeirdVariables" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polNumbersAtDifferentRings" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0.025"/>
  <testcase name="polComplex" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polBig" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0.001"/>
  <testcase name="polOnlyOneFloatNumber" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polComplexSimple" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polShouldNotExpand" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polFractionsInCq" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0.001"/>
  <testcase name="polSimpleInQ" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0.001"/>
  <testcase name="polNumberDualMinusToUnary" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0.001"/>
  <testcase name="polSingleVar" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polWithGreekVariable" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0.002"/>
  <testcase name="polUnusedHighestVarsShouldBeTruncated" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polWithWeirdVariablesAndUnderscore" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polFractionInShorExpr" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polMonomialShouldContainsOnlyOneMultiply" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polInZpPowerGreaterThanP" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0"/>
  <testcase name="polNegativeNumbersAtDifferentRings" classname="com.mathpar.func.parser.PolynomialAndNumberTest" time="0.004"/>
  <testcase name="symbMixedNameWithSpaces" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbUnderScoreWithRingVars" classname="com.mathpar.func.parser.SymbolTest" time="0.017"/>
  <testcase name="symbNameWithArgumentsNullQuestion" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbNameWithArgumentsNullQuestionWithNonCommuteList" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbPolSumWithSymbol" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbPolynomWithNumber" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbStringLiteral" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbLongNameWithUnderscores" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbSimple" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbHboxEmpty" classname="com.mathpar.func.parser.SymbolTest" time="0.001"/>
  <testcase name="symbMixedNameSymbolWithPolWithSpaces" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbWithUnderscores" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbMixedSymbolWithLongPolynomialWithoutSpaces" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbUnaryMinus" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbLongNameWithUnderscorsWithNulls" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbGreekDoesnotConflictWithFunctions" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbMixedNamePolWithSymbolWithSpaces" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbWithBracesSimple" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbWithBracesWithIndices" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbMixedNamePolWithSymbolWithoutSpaces" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbLongNameWithoutUnderscoresAndPolynomial" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbLongNameWithUnderscorsWithNullsWithNonCommuteList" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbSpacesAndBackslash" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbMixedNameSymbolWithPolWithoutSpaces" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbDependentOnVars" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbHbox" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbMixedNameStartingWithNumber" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
  <testcase name="symbHboxWithSpecialSymbols" classname="com.mathpar.func.parser.SymbolTest" time="0"/>
</testsuite>